{
  "type": "Hough",
  "hardcoded": false,
  "customInput": false,
  "solution": "const a_step = 0.1;\n  const r_step = 4.0;\n  const max_r = 400.0;\n  \n  function Hough({\n    YUVFrame,\n    Mask,\n  }: {\n    YUVFrame: ImageData;\n    Mask: { data: boolean[]; width: number; height: number };\n  }): {\n    Accumulator: {\n      data: number[];\n      width: number;\n      height: number;\n      alpha_steps: number;\n      r_steps: number;\n    };\n  } {\n    // Accumulatore\n    const alpha_steps = Math.round(Math.PI / a_step) + 1;\n    const r_steps = Math.round((max_r * 2.0) / r_step) + 1;\n    const accData = new Array(alpha_steps * r_steps).fill(0);\n  \n    for (let i = 0; i < YUVFrame.data.length; i += 4) {\n      const maskValue = Mask.data[i / 4];\n      const imgY = YUVFrame.data[i + 0];\n  \n      const x = (i / 4) % YUVFrame.width;\n      const y = Math.floor(i / 4 / YUVFrame.width);\n  \n      // Se un pixel è stato selezionato dalla maschera può far parte della barra\n      if (maskValue) {\n        // Creo la sua curva trasformata iterando per ogni angolo\n        for (let a = 0.0; a < Math.PI; a += a_step) {\n          // Calcolo il parametro r per tale angolo\n          const r = x * Math.cos(a) + y * Math.sin(a);\n  \n          // Se tale parametro è compreso nei bound attesi...\n          if (r > -max_r && r < max_r) {\n            // Calcolo la cella nell'accumulatore\n            const r_pos = Math.floor((r + max_r) / r_step);\n            const a_pos = Math.floor(a / a_step);\n  \n            // E vi aggiungo il valore della luminanza\n            accData[a_pos + r_pos * alpha_steps] += imgY;\n          }\n        }\n      }\n    }\n  \n    return {\n      Accumulator: {\n        data: accData,\n        width: Mask.width,\n        height: Mask.height,\n        alpha_steps,r_steps\n      },\n    };\n  }",
  "inputs": [
    {
      "label": "YUVFrame",
      "type": "input",
      "valueType": "imagedata"
    },
    {
      "label": "Mask",
      "type": "input",
      "valueType": "mask"
    }
  ],
  "outputs": [
    {
      "label": "Accumulator",
      "type": "output",
      "valueType": "accumulator"
    }
  ]
}
